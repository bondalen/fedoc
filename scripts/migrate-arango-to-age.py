#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ArangoDB –≤ PostgreSQL + Apache AGE

–ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π:
- canonical_nodes ‚Üí canonical_node (vertices)
- project_relations ‚Üí project_relation (edges)

–ê–≤—Ç–æ—Ä: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä
–î–∞—Ç–∞: 18 –æ–∫—Ç—è–±—Ä—è 2025
"""

import sys
import json
import argparse
from typing import Dict, List, Any
import psycopg2
from psycopg2.extras import Json
from arango import ArangoClient
from arango.database import StandardDatabase


def dict_to_cypher_map(d: Dict[str, Any]) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Python dict –≤ Cypher map —Ñ–æ—Ä–º–∞—Ç
    
    Python: {'name': 'Backend', 'count': 42, 'active': True}
    Cypher: {name: 'Backend', count: 42, active: true}
    
    Args:
        d: Python —Å–ª–æ–≤–∞—Ä—å
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Cypher map
    """
    def format_value(v):
        if v is None:
            return 'null'
        elif isinstance(v, bool):
            return 'true' if v else 'false'
        elif isinstance(v, (int, float)):
            return str(v)
        elif isinstance(v, str):
            # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
            escaped = v.replace("'", "\\'")
            return f"'{escaped}'"
        elif isinstance(v, list):
            # –ú–∞—Å—Å–∏–≤: [1, 2, 3] –∏–ª–∏ ['a', 'b']
            items = [format_value(item) for item in v]
            return '[' + ', '.join(items) + ']'
        elif isinstance(v, dict):
            # –í–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            return dict_to_cypher_map(v)
        else:
            # Fallback - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É
            escaped = str(v).replace("'", "\\'")
            return f"'{escaped}'"
    
    if not d:
        return '{}'
    
    items = []
    for k, v in d.items():
        items.append(f"{k}: {format_value(v)}")
    
    return '{' + ', '.join(items) + '}'


class ArangoToAGEMigrator:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ArangoDB –≤ Apache AGE"""
    
    def __init__(
        self,
        arango_host: str,
        arango_db: str,
        arango_user: str,
        arango_password: str,
        pg_host: str,
        pg_port: int,
        pg_db: str,
        pg_user: str,
        pg_password: str,
        graph_name: str = 'common_project_graph'
    ):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
        self.graph_name = graph_name
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ArangoDB
        print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ArangoDB ({arango_host})...")
        arango_client = ArangoClient(hosts=arango_host)
        self.arango_db: StandardDatabase = arango_client.db(
            arango_db,
            username=arango_user,
            password=arango_password
        )
        print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ArangoDB")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ({pg_host}:{pg_port})...")
        self.pg_conn = psycopg2.connect(
            host=pg_host,
            port=pg_port,
            database=pg_db,
            user=pg_user,
            password=pg_password
        )
        self.pg_conn.autocommit = False
        print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL")
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ AGE –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å search_path
        with self.pg_conn.cursor() as cur:
            cur.execute("LOAD 'age';")
            cur.execute("SET search_path = ag_catalog, \"$user\", public;")
        
        # –ú–∞–ø–ø–∏–Ω–≥ ID ArangoDB ‚Üí ID AGE
        self.id_mapping: Dict[str, int] = {}
    
    def migrate_vertices(self, collection_name: str, vertex_label: str) -> int:
        """
        –ú–∏–≥—Ä–∞—Ü–∏—è –≤–µ—Ä—à–∏–Ω –∏–∑ ArangoDB –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ AGE
        
        Args:
            collection_name: –ò–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ ArangoDB (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'canonical_nodes')
            vertex_label: –ú–µ—Ç–∫–∞ –≤–µ—Ä—à–∏–Ω –≤ AGE (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'canonical_node')
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω
        """
        print(f"\nüì¶ –ú–∏–≥—Ä–∞—Ü–∏—è –≤–µ—Ä—à–∏–Ω: {collection_name} ‚Üí {vertex_label}")
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ ArangoDB
        query = f"FOR d IN {collection_name} RETURN d"
        cursor = self.arango_db.aql.execute(query)
        documents = list(cursor)
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
        
        migrated = 0
        with self.pg_conn.cursor() as cur:
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å AGE –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            cur.execute("LOAD 'age';")
            cur.execute("SET search_path = ag_catalog, public;")
            
            for doc in documents:
                arango_id = doc['_id']
                arango_key = doc['_key']
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å properties (–≤—Å–µ –ø–æ–ª—è –∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö)
                properties = {
                    k: v for k, v in doc.items() 
                    if not k.startswith('_')
                }
                
                # –î–æ–±–∞–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π _key –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                properties['arango_key'] = arango_key
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å properties –≤ Cypher map —Ñ–æ—Ä–º–∞—Ç
                props_cypher = dict_to_cypher_map(properties)
                
                # –°–æ–∑–¥–∞—Ç—å –≤–µ—Ä—à–∏–Ω—É –≤ AGE —á–µ—Ä–µ–∑ Cypher
                cypher_query = f"""
                SELECT * FROM cypher('{self.graph_name}', $$
                    CREATE (n:{vertex_label} {props_cypher})
                    RETURN id(n) as vertex_id
                $$) as (vertex_id agtype)
                """
                
                cur.execute(cypher_query)
                
                result = cur.fetchone()
                if result and result[0]:
                    age_id = int(str(result[0]).strip('"'))
                    
                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ ID
                    self.id_mapping[arango_id] = age_id
                    
                    migrated += 1
                    if migrated % 10 == 0:
                        print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {migrated}/{len(documents)}")
                else:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–µ—Ä—à–∏–Ω—É –¥–ª—è {arango_key}")
        
        self.pg_conn.commit()
        print(f"‚úì –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤–µ—Ä—à–∏–Ω: {migrated}")
        
        return migrated
    
    def migrate_edges(
        self, 
        collection_name: str, 
        edge_label: str,
        use_validation: bool = True
    ) -> int:
        """
        –ú–∏–≥—Ä–∞—Ü–∏—è —Ä—ë–±–µ—Ä –∏–∑ ArangoDB –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ AGE
        
        Args:
            collection_name: –ò–º—è edge-–∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ ArangoDB
            edge_label: –ú–µ—Ç–∫–∞ —Ä—ë–±–µ—Ä –≤ AGE
            use_validation: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é create_edge_safe() –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä—ë–±–µ—Ä
        """
        print(f"\nüîó –ú–∏–≥—Ä–∞—Ü–∏—è —Ä—ë–±–µ—Ä: {collection_name} ‚Üí {edge_label}")
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä—ë–±—Ä–∞ –∏–∑ ArangoDB
        query = f"FOR e IN {collection_name} RETURN e"
        cursor = self.arango_db.aql.execute(query)
        edges = list(cursor)
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ä—ë–±–µ—Ä: {len(edges)}")
        
        migrated = 0
        skipped = 0
        
        with self.pg_conn.cursor() as cur:
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å AGE –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            cur.execute("LOAD 'age';")
            cur.execute("SET search_path = ag_catalog, public;")
            
            for edge in edges:
                from_arango = edge['_from']
                to_arango = edge['_to']
                
                # –ü–æ–ª—É—á–∏—Ç—å ID –≤–µ—Ä—à–∏–Ω –≤ AGE
                if from_arango not in self.id_mapping:
                    print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ä–µ–±—Ä–æ: –≤–µ—Ä—à–∏–Ω–∞ {from_arango} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    skipped += 1
                    continue
                
                if to_arango not in self.id_mapping:
                    print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ä–µ–±—Ä–æ: –≤–µ—Ä—à–∏–Ω–∞ {to_arango} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    skipped += 1
                    continue
                
                from_age = self.id_mapping[from_arango]
                to_age = self.id_mapping[to_arango]
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å properties
                properties = {
                    k: v for k, v in edge.items() 
                    if not k.startswith('_')
                }
                
                if use_validation:
                    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    cur.execute(
                        """
                        SELECT * FROM create_edge_safe(
                            %s::text,
                            %s::bigint,
                            %s::bigint,
                            %s::text,
                            %s::jsonb
                        )
                        """,
                        [
                            self.graph_name,
                            from_age,
                            to_age,
                            edge_label,
                            Json(properties)
                        ]
                    )
                    
                    result = cur.fetchone()
                    success = result[0]
                    
                    if not success:
                        error_msg = result[2]
                        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error_msg}")
                        skipped += 1
                        continue
                else:
                    # –ü—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Cypher
                    props_cypher = dict_to_cypher_map(properties)
                    
                    cypher_query = f"""
                    SELECT * FROM cypher('{self.graph_name}', $$
                        MATCH (a), (b)
                        WHERE id(a) = {from_age} AND id(b) = {to_age}
                        CREATE (a)-[e:{edge_label} {props_cypher}]->(b)
                        RETURN id(e) as edge_id
                    $$) as (edge_id agtype)
                    """
                    
                    cur.execute(cypher_query)
                
                migrated += 1
                if migrated % 10 == 0:
                    print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {migrated}/{len(edges)}")
        
        self.pg_conn.commit()
        print(f"‚úì –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä—ë–±–µ—Ä: {migrated}")
        if skipped > 0:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
        
        return migrated
    
    def verify_migration(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        stats = {}
        
        with self.pg_conn.cursor() as cur:
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å AGE
            cur.execute("LOAD 'age';")
            cur.execute("SET search_path = ag_catalog, public;")
            
            # –ü–æ–¥—Å—á—ë—Ç –≤–µ—Ä—à–∏–Ω
            cur.execute(f"""
                SELECT * FROM cypher('{self.graph_name}', $$
                    MATCH (n)
                    RETURN count(n) as cnt
                $$) as (cnt agtype)
            """)
            result = cur.fetchone()
            stats['vertices'] = int(str(result[0]).strip('"'))
            
            # –ü–æ–¥—Å—á—ë—Ç —Ä—ë–±–µ—Ä
            cur.execute(f"""
                SELECT * FROM cypher('{self.graph_name}', $$
                    MATCH ()-[e]->()
                    RETURN count(e) as cnt
                $$) as (cnt agtype)
            """)
            result = cur.fetchone()
            stats['edges'] = int(str(result[0]).strip('"'))
        
        print(f"   –í–µ—Ä—à–∏–Ω –≤ AGE: {stats['vertices']}")
        print(f"   –†—ë–±–µ—Ä –≤ AGE: {stats['edges']}")
        
        return stats
    
    def export_id_mapping(self, filename: str):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞–ø–ø–∏–Ω–≥ ID –≤ JSON"""
        print(f"\nüíæ –≠–∫—Å–ø–æ—Ä—Ç –º–∞–ø–ø–∏–Ω–≥–∞ ID –≤ {filename}...")
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.id_mapping, f, indent=2, ensure_ascii=False)
        
        print(f"‚úì –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(self.id_mapping)} –º–∞–ø–ø–∏–Ω–≥–æ–≤")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.pg_conn:
            self.pg_conn.close()
        print("\n‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")


def main():
    parser = argparse.ArgumentParser(
        description='–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ ArangoDB –≤ PostgreSQL + Apache AGE'
    )
    
    # ArangoDB –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--arango-host', default='http://localhost:8529')
    parser.add_argument('--arango-db', default='fedoc')
    parser.add_argument('--arango-user', default='root')
    parser.add_argument('--arango-password', required=True)
    
    # PostgreSQL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--pg-host', default='localhost')
    parser.add_argument('--pg-port', type=int, default=5432)
    parser.add_argument('--pg-db', default='fedoc')
    parser.add_argument('--pg-user', default='postgres')
    parser.add_argument('--pg-password', required=True)
    
    # –û–ø—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
    parser.add_argument('--graph-name', default='common_project_graph')
    parser.add_argument('--no-validation', action='store_true',
                       help='–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä—ë–±–µ—Ä')
    parser.add_argument('--export-mapping', 
                       help='–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞–ø–ø–∏–Ω–≥ ID –≤ JSON —Ñ–∞–π–ª')
    
    args = parser.parse_args()
    
    print("=" * 60)
    print("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø ARANGO ‚Üí POSTGRESQL + AGE")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ç–æ—Ä
        migrator = ArangoToAGEMigrator(
            arango_host=args.arango_host,
            arango_db=args.arango_db,
            arango_user=args.arango_user,
            arango_password=args.arango_password,
            pg_host=args.pg_host,
            pg_port=args.pg_port,
            pg_db=args.pg_db,
            pg_user=args.pg_user,
            pg_password=args.pg_password,
            graph_name=args.graph_name
        )
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è –≤–µ—Ä—à–∏–Ω
        migrator.migrate_vertices('canonical_nodes', 'canonical_node')
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è —Ä—ë–±–µ—Ä
        migrator.migrate_edges(
            'project_relations', 
            'project_relation',
            use_validation=not args.no_validation
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        stats = migrator.verify_migration()
        
        # –≠–∫—Å–ø–æ—Ä—Ç –º–∞–ø–ø–∏–Ω–≥–∞
        if args.export_mapping:
            migrator.export_id_mapping(args.export_mapping)
        
        migrator.close()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤–µ—Ä—à–∏–Ω: {stats['vertices']}")
        print(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä—ë–±–µ—Ä: {stats['edges']}")
        print()
        
        return 0
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ú–ò–ì–†–ê–¶–ò–ò: {e}", file=sys.stderr)
        import traceback
        traceback.print_exc()
        return 1


if __name__ == '__main__':
    sys.exit(main())

