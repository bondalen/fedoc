#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Graph Viewer
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, SSH –∫–ª—é—á–µ–π, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import os
import sys
import subprocess
from pathlib import Path
from typing import Optional

from .config_manager import ConfigManager


def log(message):
    """–í—ã–≤–æ–¥ –≤ stderr —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å MCP –ø—Ä–æ—Ç–æ–∫–æ–ª"""
    print(message, file=sys.stderr, flush=True)


class InteractiveSetup:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    def __init__(self, config: ConfigManager):
        """
        Args:
            config: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.config = config
        self.interactive = sys.stdin.isatty()
    
    def check_all(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Graph Viewer...")
        log("")
        
        # 1. npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self.check_and_install_npm_dependencies()
        
        # 2. SSH –∫–ª—é—á–∏
        self.check_and_create_ssh_key()
        
        # 3. SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.check_and_create_ssh_config()
        
        # 4. Python –ø–∞–∫–µ—Ç—ã
        self.check_python_packages()
        
        log("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def check_and_install_npm_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        frontend_dir = self.config.get_path('project.root') / self.config.get('paths.frontend')
        
        if not self._check_npm_deps(frontend_dir):
            log("‚ö†Ô∏è  npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
            if self.config.get('options.auto_install_npm'):
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
                log("   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞")
                self._install_npm_deps(frontend_dir)
            elif self.interactive:
                # –°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if self._ask_user("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å?"):
                    self._install_npm_deps(frontend_dir)
                else:
                    log("   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: cd {} && npm install".format(frontend_dir))
            else:
                # –ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                log("   ‚ÑπÔ∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: cd {} && npm install".format(frontend_dir))
        else:
            log("‚úì npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def check_and_create_ssh_key(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å SSH –∫–ª—é—á"""
        ssh_key = Path(self.config.get('ssh.key_path', '~/.ssh/id_ed25519')).expanduser()
        
        if not ssh_key.exists():
            log(f"‚ö†Ô∏è  SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: {ssh_key}")
            
            if self.config.get('options.auto_create_ssh_key'):
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
                log("   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
                self._create_ssh_key(ssh_key)
                self._copy_ssh_key_to_server()
            elif self.interactive:
                # –°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if self._ask_user("–°–æ–∑–¥–∞—Ç—å SSH –∫–ª—é—á —Å–µ–π—á–∞—Å?"):
                    self._create_ssh_key(ssh_key)
                    if self._ask_user("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä?"):
                        self._copy_ssh_key_to_server()
                else:
                    log(f"   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª—é—á –≤—Ä—É—á–Ω—É—é: ssh-keygen -t ed25519 -f {ssh_key}")
            else:
                # –ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
                log(f"   ‚ÑπÔ∏è  –°–æ–∑–¥–∞–π—Ç–µ –∫–ª—é—á –≤—Ä—É—á–Ω—É—é: ssh-keygen -t ed25519 -f {ssh_key}")
        else:
            log(f"‚úì SSH –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {ssh_key}")
    
    def check_and_create_ssh_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        ssh_alias = self.config.get('remote_server.ssh_alias', 'vuege-server')
        
        if not self._check_ssh_config(ssh_alias):
            log(f"‚ö†Ô∏è  SSH –∞–ª–∏–∞—Å '{ssh_alias}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ~/.ssh/config")
            
            if self.config.get('options.auto_create_ssh_config'):
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
                log("   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω–æ")
                self._create_ssh_config()
            elif self.interactive:
                # –°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if self._ask_user(f"–°–æ–∑–¥–∞—Ç—å SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è '{ssh_alias}'?"):
                    self._create_ssh_config()
                else:
                    log("   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ")
            else:
                # –ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
                log("   ‚ÑπÔ∏è  –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ auto_create_ssh_config: true")
        else:
            log(f"‚úì SSH –∞–ª–∏–∞—Å '{ssh_alias}' –Ω–∞–π–¥–µ–Ω")
    
    def check_python_packages(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Python –ø–∞–∫–µ—Ç—ã"""
        required = {
            'arango': 'python-arango',
            'flask': 'flask',
            'flask_cors': 'flask-cors',
            'yaml': 'pyyaml'
        }
        
        missing = []
        for module, package in required.items():
            try:
                __import__(module)
            except ImportError:
                missing.append(package)
        
        if missing:
            log(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ Python –ø–∞–∫–µ—Ç—ã: {', '.join(missing)}")
            log(f"   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install {' '.join(missing)}")
        else:
            log("‚úì –í—Å–µ Python –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def _check_npm_deps(self, frontend_dir: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        node_modules = frontend_dir / 'node_modules'
        package_json = frontend_dir / 'package.json'
        
        if not package_json.exists():
            log(f"   ‚ö†Ô∏è  package.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {package_json}")
            return False
        
        if not node_modules.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ node_modules –Ω–µ –ø—É—Å—Ç–æ–π
        try:
            return len(list(node_modules.iterdir())) > 0
        except:
            return False
    
    def _install_npm_deps(self, frontend_dir: Path) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        log(f"   –£—Å—Ç–∞–Ω–æ–≤–∫–∞ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ {frontend_dir}...")
        
        try:
            result = subprocess.run(
                ['npm', 'install'],
                cwd=frontend_dir,
                capture_output=True,
                text=True,
                timeout=300  # 5 –º–∏–Ω—É—Ç
            )
            
            if result.returncode == 0:
                log("   ‚úì npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return True
            else:
                log(f"   ‚úó –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            log("   ‚úó –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (>5 –º–∏–Ω—É—Ç)")
            return False
        except FileNotFoundError:
            log("   ‚úó npm –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js")
            return False
        except Exception as e:
            log(f"   ‚úó –û—à–∏–±–∫–∞: {e}")
            return False
    
    def _check_ssh_config(self, alias: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ SSH –∞–ª–∏–∞—Å"""
        ssh_config = Path.home() / '.ssh' / 'config'
        
        if not ssh_config.exists():
            return False
        
        try:
            with open(ssh_config) as f:
                content = f.read()
                return f'Host {alias}' in content
        except:
            return False
    
    def _create_ssh_config(self):
        """–°–æ–∑–¥–∞—Ç—å SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        ssh_config_path = Path.home() / '.ssh' / 'config'
        ssh_dir = ssh_config_path.parent
        
        # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        ssh_dir.mkdir(mode=0o700, exist_ok=True)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        alias = self.config.get('remote_server.ssh_alias')
        host = self.config.get('remote_server.host')
        user = self.config.get('remote_server.user')
        key_path = self.config.get('ssh.key_path', '~/.ssh/id_ed25519')
        
        config_entry = f"""
# fedoc - –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å ArangoDB
Host {alias}
    HostName {host}
    User {user}
    IdentityFile {key_path}
    StrictHostKeyChecking no
    UserKnownHostsFile=/dev/null
"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
            if ssh_config_path.exists():
                with open(ssh_config_path, 'r') as f:
                    if f'Host {alias}' in f.read():
                        log(f"   ‚ÑπÔ∏è  –ê–ª–∏–∞—Å '{alias}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {ssh_config_path}")
                        return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            with open(ssh_config_path, 'a') as f:
                f.write(config_entry)
            
            log(f"   ‚úì SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {ssh_config_path}")
            log(f"      –ê–ª–∏–∞—Å: {alias} ‚Üí {user}@{host}")
            
        except Exception as e:
            log(f"   ‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def _create_ssh_key(self, key_path: Path):
        """–°–æ–∑–¥–∞—Ç—å SSH –∫–ª—é—á"""
        log(f"   –°–æ–∑–¥–∞–Ω–∏–µ SSH –∫–ª—é—á–∞: {key_path}")
        
        try:
            # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            key_path.parent.mkdir(mode=0o700, exist_ok=True)
            
            subprocess.run([
                'ssh-keygen',
                '-t', 'ed25519',
                '-f', str(key_path),
                '-N', '',  # –ë–µ–∑ –ø–∞—Ä–æ–ª—è
                '-C', f'fedoc-{self.config.hostname}'
            ], check=True, capture_output=True)
            
            log(f"   ‚úì SSH –∫–ª—é—á —Å–æ–∑–¥–∞–Ω: {key_path}")
            log(f"   ‚úì –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: {key_path}.pub")
            
        except subprocess.CalledProcessError as e:
            log(f"   ‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞: {e.stderr.decode()}")
        except Exception as e:
            log(f"   ‚úó –û—à–∏–±–∫–∞: {e}")
    
    def _copy_ssh_key_to_server(self):
        """–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å SSH –∫–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        user = self.config.get('remote_server.user')
        host = self.config.get('remote_server.host')
        key_path = Path(self.config.get('ssh.key_path', '~/.ssh/id_ed25519')).expanduser()
        
        server = f"{user}@{host}"
        
        log(f"   –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ SSH –∫–ª—é—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {server}")
        log("   (–ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å)")
        
        try:
            subprocess.run([
                'ssh-copy-id',
                '-i', f"{key_path}.pub",
                server
            ], check=True)
            
            log(f"   ‚úì SSH –∫–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –Ω–∞ {server}")
            
        except subprocess.CalledProcessError:
            log(f"   ‚úó –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞")
            log(f"   –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é: ssh-copy-id -i {key_path}.pub {server}")
        except Exception as e:
            log(f"   ‚úó –û—à–∏–±–∫–∞: {e}")
    
    def _ask_user(self, question: str, default: bool = True) -> bool:
        """
        –°–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ)
        
        Args:
            question: –í–æ–ø—Ä–æ—Å
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –¥–∞
        """
        if not self.interactive:
            return default
        
        prompt = f"{question} [{'Y/n' if default else 'y/N'}]: "
        try:
            response = input(prompt).strip().lower()
            if not response:
                return default
            return response in ['y', 'yes', '–¥–∞', '–¥']
        except (EOFError, KeyboardInterrupt):
            log("\n")
            return default



