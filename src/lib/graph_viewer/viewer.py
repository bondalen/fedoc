#!/usr/bin/env python3
"""
ArangoDB Graph Viewer
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ desktop –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–æ–≤ –∏–∑ ArangoDB
"""

from arango import ArangoClient
from pyvis.network import Network
import argparse
import webbrowser
import os
from pathlib import Path

class ArangoGraphViewer:
    def __init__(self, host, database, username, password):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ArangoDB"""
        self.client = ArangoClient(hosts=host)
        self.db = self.client.db(database, username=username, password=password)
        
    def fetch_graph(self, graph_name, project_filter=None, max_nodes=1000, start_node=None, depth=10):
        """–ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ –∏–∑ ArangoDB –æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –≤–µ—Ä—à–∏–Ω—ã –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –≥–ª—É–±–∏–Ω—É"""
        print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∞ '{graph_name}' –∏–∑ ArangoDB...")
        
        if not start_node:
            start_node = 'canonical_nodes/c:backend'
        
        # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å AQL –∑–∞–ø—Ä–æ—Å
        query = """
        FOR v, e IN 1..@depth OUTBOUND @start_node
            GRAPH @graph_name
        """
        
        if project_filter:
            query += " FILTER @project IN e.projects"
        
        query += """
            LIMIT @max_nodes
            RETURN {
                from: e._from,
                to: e._to,
                from_name: DOCUMENT(e._from).name,
                to_name: DOCUMENT(e._to).name,
                from_key: DOCUMENT(e._from)._key,
                to_key: DOCUMENT(e._to)._key,
                from_kind: DOCUMENT(e._from).kind,
                to_kind: DOCUMENT(e._to).kind,
                projects: e.projects,
                type: e.relationType
            }
        """
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        bind_vars = {
            'start_node': start_node,
            'depth': depth,
            'graph_name': graph_name,
            'max_nodes': max_nodes
        }
        if project_filter:
            bind_vars['project'] = project_filter
        
        cursor = self.db.aql.execute(query, bind_vars=bind_vars)
        
        edges = list(cursor)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(edges)} —Ä—ë–±–µ—Ä")
        
        return edges
    
    def visualize(self, edges, output_file='graph.html', project_filter=None, theme='dark'):
        """–°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"""
        print(f"üé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
        
        # –¢–µ–º—ã
        if theme == 'dark':
            bgcolor = '#111111'
            font_color = '#e0e0e0'
            concept_color = '#1E88E5'
            tech_color = '#43A047'
            edge_real = '#64B5F6'
            edge_alt = '#9E9E9E'
            node_concept_bg = '#263238'
            node_tech_bg = '#1B5E20'
        else:
            bgcolor = '#ffffff'
            font_color = '#000000'
            concept_color = '#1565C0'
            tech_color = '#2E7D32'
            edge_real = '#1976D2'
            edge_alt = '#9E9E9E'
            node_concept_bg = '#E3F2FD'
            node_tech_bg = '#C8E6C9'
        
        # –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å
        net = Network(
            height='900px',
            width='100%',
            bgcolor=bgcolor,
            font_color=font_color,
            directed=True
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–∑–∏–∫–∏ –∏ —É–∫–ª–∞–¥–∫–∏: –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ + —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Ä—ë–±–µ—Ä
        net.set_options("""
        {
          "physics": {
            "enabled": true,
            "solver": "hierarchicalRepulsion",
            "stabilization": { "enabled": true, "iterations": 800, "updateInterval": 25 },
            "hierarchicalRepulsion": {
              "nodeDistance": 160,
              "springLength": 160,
              "springConstant": 0.03,
              "damping": 0.45,
              "avoidOverlap": 1
            },
            "minVelocity": 0.5
          },
          "nodes": {
            "font": { "size": 16, "face": "Arial" },
            "borderWidth": 2,
            "size": 25
          },
          "edges": {
            "arrows": { "to": { "enabled": true, "scaleFactor": 0.5 } },
            "smooth": { "type": "cubicBezier", "forceDirection": "vertical" },
            "font": { "size": 12, "align": "middle" }
          },
          "interaction": {
            "navigationButtons": true,
            "keyboard": true,
            "hover": true,
            "zoomView": true,
            "dragView": true
          },
          "layout": {
            "hierarchical": {
              "enabled": true,
              "direction": "UD",
              "sortMethod": "directed",
              "levelSeparation": 140,
              "nodeSpacing": 180,
              "treeSpacing": 240,
              "blockShifting": true,
              "edgeMinimization": true,
              "parentCentralization": true
            }
          }
        }
        """)
        
        # –î–æ–±–∞–≤–∏—Ç—å —É–∑–ª—ã –∏ —Ä—ë–±—Ä–∞
        added_nodes = set()
        
        for edge in edges:
            # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–≤–µ—Ç–∞ –¥–ª—è —É–∑–ª–æ–≤
            from_color = node_concept_bg if edge['from_kind'] == 'concept' else node_tech_bg
            to_color = node_concept_bg if edge['to_kind'] == 'concept' else node_tech_bg
            
            # –î–æ–±–∞–≤–∏—Ç—å —É–∑–ª—ã
            if edge['from_key'] not in added_nodes:
                net.add_node(
                    edge['from_key'],
                    label=edge['from_name'],
                    color=from_color,
                    title=f"{edge['from_key']}\n–¢–∏–ø: {edge['from_kind']}",
                    shape='box' if edge['from_kind'] == 'concept' else 'ellipse'
                )
                added_nodes.add(edge['from_key'])
            
            if edge['to_key'] not in added_nodes:
                net.add_node(
                    edge['to_key'],
                    label=edge['to_name'],
                    color=to_color,
                    title=f"{edge['to_key']}\n–¢–∏–ø: {edge['to_kind']}",
                    shape='box' if edge['to_kind'] == 'concept' else 'ellipse'
                )
                added_nodes.add(edge['to_key'])
            
            # –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±—Ä–æ
            projects_label = ', '.join(edge['projects']) if edge['projects'] else '–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞'
            net.add_edge(
                edge['from_key'],
                edge['to_key'],
                label=projects_label,
                title=f"{edge['type']}: {projects_label}",
                color=edge_real if edge['projects'] else edge_alt
            )
        
        # –î–æ–±–∞–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ HTML
        html_content = net.generate_html()
        
        # –í—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—ã –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º body
        controls_html = """
        <div id="controls" style="position: fixed; top: 10px; left: 10px; background: rgba(0,0,0,0.8); color: white; padding: 15px; border-radius: 8px; font-family: Arial; z-index: 1000; min-width: 300px;">
            <h3 style="margin: 0 0 10px 0; font-size: 16px;">üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–æ–º</h3>
            
            <div style="margin-bottom: 10px;">
                <label style="display: block; margin-bottom: 5px; font-size: 12px;">–°—Ç–∞—Ä—Ç–æ–≤–∞—è –≤–µ—Ä—à–∏–Ω–∞:</label>
                <select id="startNode" style="width: 100%; padding: 5px; border-radius: 4px; border: 1px solid #ccc;">
                    <option value="canonical_nodes/c:backend">c:backend (–ë—ç–∫–µ–Ω–¥)</option>
                    <option value="canonical_nodes/c:development-objects">c:development-objects (–û–±—ä–µ–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)</option>
                    <option value="canonical_nodes/c:layer">c:layer (–°–ª–æ–π)</option>
                    <option value="canonical_nodes/c:frontend">c:frontend (–§—Ä–æ–Ω—Ç–µ–Ω–¥)</option>
                    <option value="canonical_nodes/t:java@21">t:java@21 (Java 21)</option>
                    <option value="canonical_nodes/t:spring-boot@3.4.5">t:spring-boot@3.4.5 (Spring Boot)</option>
                </select>
            </div>
            
            <div style="margin-bottom: 10px;">
                <label style="display: block; margin-bottom: 5px; font-size: 12px;">–ì–ª—É–±–∏–Ω–∞ –æ–±—Ö–æ–¥–∞:</label>
                <input type="range" id="depth" min="1" max="15" value="5" style="width: 100%;">
                <span id="depthValue" style="font-size: 12px;">5</span>
            </div>
            
            <div style="margin-bottom: 10px;">
                <label style="display: block; margin-bottom: 5px; font-size: 12px;">–ü—Ä–æ–µ–∫—Ç:</label>
                <select id="project" style="width: 100%; padding: 5px; border-radius: 4px; border: 1px solid #ccc;">
                    <option value="">–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã</option>
                    <option value="fepro">FEPRO</option>
                    <option value="femsq">FEMSQ</option>
                    <option value="fedoc">FEDOC</option>
                </select>
            </div>
            
            <div style="margin-bottom: 15px;">
                <label style="display: block; margin-bottom: 5px; font-size: 12px;">–¢–µ–º–∞:</label>
                <div style="display: flex; gap: 10px;">
                    <label style="display: flex; align-items: center; font-size: 12px;">
                        <input type="radio" name="theme" value="dark" checked style="margin-right: 5px;">
                        üåô –¢—ë–º–Ω–∞—è
                    </label>
                    <label style="display: flex; align-items: center; font-size: 12px;">
                        <input type="radio" name="theme" value="light" style="margin-right: 5px;">
                        ‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è
                    </label>
                </div>
            </div>
            
            <div style="display: flex; gap: 5px;">
                <button id="updateGraph" style="flex: 1; padding: 8px; background: #1976D2; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">
                    üîÑ –û–±–Ω–æ–≤–∏—Ç—å
                </button>
                <button id="fitGraph" style="flex: 1; padding: 8px; background: #43A047; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">
                    üìê –ü–æ–¥–æ–≥–Ω–∞—Ç—å
                </button>
            </div>
            
            <div style="margin-top: 10px; font-size: 11px; color: #ccc;">
                <div>–£–∑–ª–æ–≤: <span id="nodeCount">-</span></div>
                <div>–†—ë–±–µ—Ä: <span id="edgeCount">-</span></div>
            </div>
        </div>
        
        <script>
        // –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ
        document.getElementById('updateGraph').onclick = function() {
            const startNode = document.getElementById('startNode').value;
            const depth = document.getElementById('depth').value;
            const project = document.getElementById('project').value;
            const theme = document.querySelector('input[name="theme"]:checked').value;
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            const url = new URL(window.location);
            url.searchParams.set('start', startNode);
            url.searchParams.set('depth', depth);
            url.searchParams.set('project', project);
            url.searchParams.set('theme', theme);
            window.location.href = url.toString();
        };
        
        // –ü–æ–¥–æ–≥–Ω–∞—Ç—å –≥—Ä–∞—Ñ
        document.getElementById('fitGraph').onclick = function() {
            if (window.network) {
                window.network.fit();
            }
        };
        
        // –û–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã
        document.getElementById('depth').oninput = function() {
            document.getElementById('depthValue').textContent = this.value;
        };
        
        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('start')) document.getElementById('startNode').value = urlParams.get('start');
        if (urlParams.get('depth')) {
            document.getElementById('depth').value = urlParams.get('depth');
            document.getElementById('depthValue').textContent = urlParams.get('depth');
        }
        if (urlParams.get('project')) document.getElementById('project').value = urlParams.get('project');
        if (urlParams.get('theme')) document.querySelector('input[name="theme"][value="' + urlParams.get('theme') + '"]').checked = true;
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏
        setTimeout(() => {
            if (window.network) {
                const nodes = window.network.getNodes();
                const edges = window.network.getEdges();
                document.getElementById('nodeCount').textContent = nodes.length;
                document.getElementById('edgeCount').textContent = edges.length;
            }
        }, 1000);
        </script>
        """
        
        # –í—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—ã –ø–µ—Ä–µ–¥ </body>
        html_content = html_content.replace('</body>', controls_html + '</body>')
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π HTML
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {output_file}")
        print(f"‚úÖ –£–∑–ª–æ–≤: {len(added_nodes)}")
        print(f"‚úÖ –†—ë–±–µ—Ä: {len(edges)}")
        
        return output_file


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='ArangoDB Graph Viewer - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–æ–≤'
    )
    parser.add_argument('--host', default='http://localhost:8529', help='–•–æ—Å—Ç ArangoDB')
    parser.add_argument('--db', default='fedoc', help='–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--user', default='root', help='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    parser.add_argument('--password', required=True, help='–ü–∞—Ä–æ–ª—å')
    parser.add_argument('--graph', default='common_project_graph', help='–ò–º—è –≥—Ä–∞—Ñ–∞')
    parser.add_argument('--project', help='–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç—É (fepro, femsq, fedoc)')
    parser.add_argument('--output', default='/tmp/arango-graph.html', help='–í—ã—Ö–æ–¥–Ω–æ–π HTML —Ñ–∞–π–ª')
    parser.add_argument('--max-nodes', type=int, default=1000, help='–ú–∞–∫—Å–∏–º—É–º —É–∑–ª–æ–≤')
    parser.add_argument('--start-node', help='–°—Ç–∞—Ä—Ç–æ–≤–∞—è –≤–µ—Ä—à–∏–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä canonical_nodes/c:backend')
    parser.add_argument('--depth', type=int, default=10, help='–ì–ª—É–±–∏–Ω–∞ –æ–±—Ö–æ–¥–∞ (—Ä—ë–±–µ—Ä)')
    parser.add_argument('--theme', choices=['dark','light'], default='dark', help='–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è')
    parser.add_argument('--no-browser', action='store_true', help='–ù–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä')
    
    args = parser.parse_args()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ArangoDB
        print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {args.host}/{args.db}...")
        viewer = ArangoGraphViewer(args.host, args.db, args.user, args.password)
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞—Ñ
        edges = viewer.fetch_graph(
            graph_name=args.graph,
            project_filter=args.project,
            max_nodes=args.max_nodes,
            start_node=args.start_node,
            depth=args.depth
        )
        
        if not edges:
            print("‚ö†Ô∏è  –ì—Ä–∞—Ñ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        output_file = viewer.visualize(edges, args.output, args.project, theme=args.theme)
        
        # –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        if not args.no_browser:
            print(f"üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")
            webbrowser.open('file://' + os.path.abspath(output_file))
        
        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ì—Ä–∞—Ñ –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ.")
        print(f"üìÅ –§–∞–π–ª: {output_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    main()

