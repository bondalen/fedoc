import { defineStore } from 'pinia'
import { ref, computed, watch } from 'vue'
import io from 'socket.io-client'

const API_BASE = '/api'

export const useGraphStore = defineStore('graph', () => {
  // ========== STATE ==========
  
  // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–∑–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
  const nodes = ref([])
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä–∞—Ñ–∞
  const startNode = ref('')
  const depth = ref(5)
  const project = ref('')
  const theme = ref('dark')
  
  // Vis-network –æ–±—ä–µ–∫—Ç—ã
  const network = ref(null)
  const nodesDataSet = ref(null)
  const edgesDataSet = ref(null)
  
  // –ü–∞–Ω–µ–ª—å –¥–µ—Ç–∞–ª–µ–π
  const selectedObject = ref(null)
  const showDetails = ref(false)
  
  // –ü–∞–Ω–µ–ª—å –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  const fullText = ref('')
  const showFullText = ref(false)
  
  // –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const loadedDocs = ref(new Set())
  const documentCache = ref(new Map())
  
  // –í—ã–±–æ—Ä–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Cursor AI
  const selectedNodesList = ref([])
  const selectedEdgesList = ref([])
  
  // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  let socket = null
  const isSocketConnected = ref(false)
  
  // –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (—Ç–æ–ª—å–∫–æ 10 —Å–æ—Å—Ç–æ—è–Ω–∏–π)
  const viewHistory = ref([])           // –ú–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  const currentHistoryIndex = ref(-1)   // –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏
  const maxHistorySize = 10            // –ú–∞–∫—Å–∏–º—É–º —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
  const isRestoringFromHistory = ref(false) // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
  
  // –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
  const isLoading = ref(false)
  const error = ref(null)
  
  // –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–æ–∫
  let errorTimeout = null
  
  // ========== COMPUTED ==========
  
  const nodeCount = computed(() => {
    return nodesDataSet.value ? nodesDataSet.value.length : 0
  })
  
  const edgeCount = computed(() => {
    return edgesDataSet.value ? edgesDataSet.value.length : 0
  })
  
  const selectionCount = computed(() => {
    return selectedNodesList.value.length + selectedEdgesList.value.length
  })
  
  const selectedNodesCount = computed(() => {
    return selectedNodesList.value.length
  })
  
  const selectedEdgesCount = computed(() => {
    return selectedEdgesList.value.length
  })
  
  const canUndo = computed(() => currentHistoryIndex.value > 0)
  const canRedo = computed(() => currentHistoryIndex.value < viewHistory.value.length - 1)

  // ========== AUTO HISTORY MANAGEMENT ==========

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –≤–∏–¥–∏–º—ã—Ö —É–∑–ª–∞—Ö –∏ —Ä—ë–±—Ä–∞—Ö
   */
  watch([() => nodesDataSet.value?.length, () => edgesDataSet.value?.length],
    ([newNodesCount, newEdgesCount], [oldNodesCount, oldEdgesCount]) => {
      // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
      if (isRestoringFromHistory.value) {
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–∏–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
      if (newNodesCount !== oldNodesCount || newEdgesCount !== oldEdgesCount) {
        console.log(`–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∏–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: —É–∑–ª—ã ${oldNodesCount} ‚Üí ${newNodesCount}, —Ä—ë–±—Ä–∞ ${oldEdgesCount} ‚Üí ${newEdgesCount}`)
        saveCurrentState()
      }
    },
    { flush: 'post' }
  )
  
  // ========== ACTIONS ==========
  
  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ vis-network –æ–±—ä–µ–∫—Ç—ã
   */
  const setNetwork = (net, nodesDS, edgesDS) => {
    network.value = net
    nodesDataSet.value = nodesDS
    edgesDataSet.value = edgesDS
  }
  
  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏
   */
  const setError = (msg) => {
    error.value = msg
    if (errorTimeout) {
      clearTimeout(errorTimeout)
    }
    errorTimeout = setTimeout(() => {
      clearError()
    }, 5000)
  }
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
   */
  const clearError = () => {
    if (errorTimeout) {
      clearTimeout(errorTimeout)
      errorTimeout = null
    }
    error.value = null
  }
  
  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
   */
  const validateApiResponse = (data, requiredFields = []) => {
    if (!data || typeof data !== 'object') {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
    }
    
    for (const field of requiredFields) {
      if (!(field in data)) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: ${field}`)
      }
    }
    
    return true
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–∑–ª–æ–≤
   */
  const loadNodes = async () => {
    try {
      isLoading.value = true
      clearError()
      
      const params = new URLSearchParams()
      if (project.value) {
        params.append('project', project.value)
      }
      
      const url = `${API_BASE}/nodes${params.toString() ? '?' + params.toString() : ''}`
      const response = await fetch(url)
      
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`)
      }
      
      const data = await response.json()
      
      if (!Array.isArray(data)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: –æ–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ —É–∑–ª–æ–≤')
      }
      
      nodes.value = data
      
      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —É–∑–ª–æ–≤: ${nodes.value.length}`)
      
      if (startNode.value) {
        console.log('–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∞ –¥–ª—è —É–∑–ª–∞:', startNode.value)
        await loadGraph()
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–∑–ª–æ–≤:', err)
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤: ${err.message}`)
    } finally {
      isLoading.value = false
    }
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
   */
  const loadGraph = async () => {
    if (!nodesDataSet.value || !edgesDataSet.value) {
      error.value = '–ì—Ä–∞—Ñ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
      return
    }
    
    try {
      isLoading.value = true
      error.value = null
      
      const params = new URLSearchParams()

      if (startNode.value) {
        params.append('start', startNode.value)
        params.append('depth', depth.value)
      }
      
      if (project.value) {
        params.append('project', project.value)
      }
      
      const url = `${API_BASE}/graph?${params.toString()}`
      const response = await fetch(url)
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      
      const data = await response.json()
      
      // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∞
      nodesDataSet.value.clear()
      edgesDataSet.value.clear()

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
      if (data.nodes && data.nodes.length > 0) {
        nodesDataSet.value.add(data.nodes)
      }

      if (data.edges && data.edges.length > 0) {
        edgesDataSet.value.add(data.edges)
      }
      
      // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      applyTheme()
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∞:', err)
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞—Ñ: ${err.message}`)
    } finally {
      isLoading.value = false
    }
  }
  
  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∫ –≥—Ä–∞—Ñ—É
   */
  const applyTheme = () => {
    if (!network.value) return

    const isDark = theme.value === 'dark'
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
    const labelColor = isDark ? '#e0e0e0' : '#333'
    const edgeColor = isDark ? '#B0BEC5' : '#37474F'
    const strokeColor = isDark ? '#000' : '#fff'
    const strokeWidth = isDark ? 2 : 4
    
    // –¶–≤–µ—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –¥–ª—è –æ–±–µ–∏—Ö —Ç–µ–º)
    const highlightColor = '#D2691E'                          // üî• –æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
    const hoverColor = '#9c27b0'                              // üíú —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è hover
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ç–∏
    network.value.setOptions({
      nodes: {
        font: { 
          color: labelColor,
          size: 12,
          bold: {
            color: isDark ? '#ffffff' : '#000000'
          }
        },
        color: {
          background: isDark ? '#2d3748' : '#ffffff',        // –±–µ–ª—ã–π –¥–ª—è light
          border: isDark ? '#4a5568' : '#e0e0e0',            // —Å–≤–µ—Ç–ª–µ–µ –¥–ª—è light
          highlight: {
            background: isDark ? '#2d3748' : '#f8f9fa',      // —Ñ–æ–Ω –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
            border: highlightColor                            // üî• –æ—Ä–∞–Ω–∂–µ–≤—ã–π
          },
          hover: {
            background: isDark ? '#2d3748' : '#f8f9fa',      // —Ñ–æ–Ω –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
            border: hoverColor                                // üíú —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
          }
        },
        shadow: {
          enabled: isDark,
          color: 'rgba(0,0,0,0.3)',
          size: 5,
          x: 2,
          y: 2
        }
      },
      edges: {
        width: isDark ? 2 : 2.5,                             // —Ç–æ–ª—â–µ –¥–ª—è light
        font: { 
          color: labelColor,
          strokeColor: strokeColor,
          strokeWidth: strokeWidth,                          // –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
          size: 12
          // bold —É–¥–∞–ª–µ–Ω - vis-network –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç boolean –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        },
        color: { 
          color: edgeColor,
          highlight: highlightColor,                         // üî• –æ—Ä–∞–Ω–∂–µ–≤—ã–π
          hover: hoverColor                                  // üíú —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        }
      }
    })
    
    // üéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –§–û–ù–ê —á–µ—Ä–µ–∑ CSS –∏ DOM
    const canvas = document.querySelector('#graph canvas')
    if (canvas) {
      canvas.style.backgroundColor = isDark ? '#1e1e1e' : '#ffffff'
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —É–∑–ª—ã —Å –Ω–æ–≤—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    if (nodesDataSet.value && nodesDataSet.value.length > 0) {
      const allNodes = nodesDataSet.value.get()
      const updatedNodes = allNodes.map(node => ({
        ...node,
        color: {
          background: isDark ? '#2d3748' : '#ffffff',        // –±–µ–ª—ã–π –¥–ª—è light
          border: isDark ? '#4a5568' : '#e0e0e0',             // —Å–≤–µ—Ç–ª–µ–µ –¥–ª—è light
          highlight: {
            background: isDark ? '#2d3748' : '#ffffff',
            border: highlightColor
          },
          hover: {
            background: isDark ? '#2d3748' : '#ffffff',
            border: hoverColor
          }
        }
      }))
      nodesDataSet.value.update(updatedNodes)
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ä—ë–±—Ä–∞ —Å –Ω–æ–≤—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    if (edgesDataSet.value && edgesDataSet.value.length > 0) {
      const allEdges = edgesDataSet.value.get()
      const updatedEdges = allEdges.map(edge => ({
        ...edge,
        color: {
          color: edgeColor,
          highlight: highlightColor,
          hover: hoverColor
        }
      }))
      edgesDataSet.value.update(updatedEdges)
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Å–µ—Ç—å
    if (network.value) {
      network.value.redraw()
    }
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
   */
  const updateSelectedNodes = async (nodeIds) => {
    try {
      selectedNodesList.value = []

      for (const nodeId of nodeIds) {
        try {
          const url = `${API_BASE}/object_details?id=${encodeURIComponent(nodeId)}`
      const response = await fetch(url)
      
          if (response.ok) {
      const data = await response.json()
            selectedNodesList.value.push(data)
          } else {
            console.warn(`Failed to load details for node ${nodeId}`)
            selectedNodesList.value.push({ _id: nodeId, projects: [] })
          }
    } catch (err) {
          console.error(`Error loading node ${nodeId}:`, err)
          selectedNodesList.value.push({ _id: nodeId, projects: [] })
        }
      }
    } catch (err) {
      console.error('Error updating selected nodes:', err)
    }
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏ —Ä—ë–±–µ—Ä
   */
  const updateSelectedEdges = async (edgeIds) => {
    try {
      selectedEdgesList.value = []

      for (const edgeId of edgeIds) {
        try {
          const url = `${API_BASE}/object_details?id=${encodeURIComponent(edgeId)}`
      const response = await fetch(url)
      
          if (response.ok) {
            const data = await response.json()
            selectedEdgesList.value.push(data)
          } else {
            console.warn(`Failed to load details for edge ${edgeId}`)
            selectedEdgesList.value.push({ _id: edgeId, projects: [] })
          }
    } catch (err) {
          console.error(`Error loading edge ${edgeId}:`, err)
          selectedEdgesList.value.push({ _id: edgeId, projects: [] })
        }
      }
    } catch (err) {
      console.error('Error updating selected edges:', err)
    }
  }
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—ã–±–æ—Ä–∫–∏
   */
  const clearSelection = () => {
    selectedNodesList.value = []
    selectedEdgesList.value = []
  }

  /**
   * –ü–æ–¥–æ–≥–Ω–∞—Ç—å –≥—Ä–∞—Ñ –∫ —ç–∫—Ä–∞–Ω—É
   */
  const fitGraph = () => {
    if (!network.value) return
    
    try {
      network.value.fit({
        animation: {
          duration: 500,
          easingFunction: 'easeInOutQuad'
        }
      })
    } catch (err) {
      console.error('Error fitting graph:', err)
    }
  }
  
  /**
   * –°–º–µ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞
   */
  const changeProject = async () => {
    await loadNodes()
    await loadGraph()
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  const loadDocumentDetails = async (docId) => {
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à
    if (documentCache.value.has(docId)) {
      console.log(`–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞: ${docId}`)
      return documentCache.value.get(docId)
    }
    
    try {
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –≤ PostgreSQL
      // –û–∂–∏–¥–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: 'projects/<key>' –∏–ª–∏ 'rules/<key>'
      let url
      if (typeof docId === 'string' && docId.includes('/')) {
        const [collection, key] = docId.split('/', 2)
        if ((collection === 'projects' || collection === 'rules') && key) {
          url = `${API_BASE}/object_details?collection=${encodeURIComponent(collection)}&key=${encodeURIComponent(key)}`
        } else {
          throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${docId}`)
        }
      } else {
        // Fallback –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö ID
        url = `${API_BASE}/object_details?id=${encodeURIComponent(docId)}`
      }
      
      const response = await fetch(url)
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      
      const data = await response.json()
      
      // –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      documentCache.value.set(docId, data)
      loadedDocs.value.add(docId)
      
      console.log(`–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: ${docId}`)
      return data
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${docId}:`, err)
      throw err
    }
  }
  
  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
   */
  const closeFullText = () => {
    showFullText.value = false
    fullText.value = ''
  }
  
  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
   */
  const toggleFullText = () => {
    if (showFullText.value) {
      closeFullText()
    } else if (fullText.value) {
      showFullText.value = true
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞
   */
  const loadObjectDetails = async (objectId) => {
    try {
      const url = `${API_BASE}/object_details?id=${encodeURIComponent(objectId)}`
      const response = await fetch(url)
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      
      const data = await response.json()
      
      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –Ω–∞–ø—Ä—è–º—É—é
      selectedObject.value = data
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞:', err)
      throw err
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–∑–ª–∞ –Ω–∞ –≥—Ä–∞—Ñ–µ
   */
  const selectNode = async (nodeId) => {
    try {
      await loadObjectDetails(nodeId)
      showDetails.value = true
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π —É–∑–ª–∞:', err)
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —É–∑–ª–∞: ${err.message}`)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–±—Ä–∞ –Ω–∞ –≥—Ä–∞—Ñ–µ
   */
  const selectEdge = async (edgeId) => {
    try {
      await loadObjectDetails(edgeId)
      showDetails.value = true
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–±—Ä–∞:', err)
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–µ–±—Ä–∞: ${err.message}`)
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –¥–µ—Ç–∞–ª–µ–π
   */
  const closeDetails = () => {
    showDetails.value = false
    selectedObject.value = null
  }

  // ========== EXPAND/HIDE OPERATIONS ==========

  /**
   * –†–∞—Å—à–∏—Ä–∏—Ç—å —É–∑–µ–ª - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ç–æ–º–∫–æ–≤ (1 —É—Ä–æ–≤–µ–Ω—å –≤–Ω–∏–∑)
   */
  const expandNodeChildren = async (nodeId) => {
    try {
      isLoading.value = true

      const params = new URLSearchParams({
        node_id: nodeId,
        direction: 'outbound',
        theme: theme.value
      })

      if (project.value) {
        params.append('project', project.value)
      }

      const url = `${API_BASE}/expand_node?${params.toString()}`
      const response = await fetch(url)

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()

      if (data.error) {
        throw new Error(data.error)
      }

      // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —É–∑–ª—ã –∏ —Ä—ë–±—Ä–∞
      const newNodes = data.nodes || []
      const newEdges = data.edges || []

      let addedNodesCount = 0
      let addedEdgesCount = 0

      // –î–æ–±–∞–≤–∏—Ç—å —É–∑–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç
      for (const node of newNodes) {
        const existsInDataSet = nodesDataSet.value.get(node.id)
        if (!existsInDataSet) {
          nodesDataSet.value.add(node)
          addedNodesCount++
        }
      }

      // –î–æ–±–∞–≤–∏—Ç—å —Ä—ë–±—Ä–∞, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç
      for (const edge of newEdges) {
        const existsInDataSet = edgesDataSet.value.get(edge.id)
        if (!existsInDataSet) {
          edgesDataSet.value.add(edge)
          addedEdgesCount++
        }
      }

      console.log(`Expanded ${nodeId} (children): +${addedNodesCount} nodes, +${addedEdgesCount} edges`)

      if (addedNodesCount === 0 && addedEdgesCount === 0) {
        setError('–ù–µ—Ç –Ω–∏–∂–µ—Å—Ç–æ—è—â–∏—Ö –≤–µ—Ä—à–∏–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')
      }

    } catch (err) {
      console.error('Error expanding node children:', err)
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–∏–∂–µ—Å—Ç–æ—è—â–∏–µ –≤–µ—Ä—à–∏–Ω—ã: ${err.message}`)
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –†–∞—Å—à–∏—Ä–∏—Ç—å —É–∑–µ–ª - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–∫–æ–≤ (1 —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö)
   */
  const expandNodeParents = async (nodeId) => {
    try {
      isLoading.value = true

      const params = new URLSearchParams({
        node_id: nodeId,
        direction: 'inbound',
        theme: theme.value
      })

      if (project.value) {
        params.append('project', project.value)
      }

      const url = `${API_BASE}/expand_node?${params.toString()}`
      const response = await fetch(url)

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()

      if (data.error) {
        throw new Error(data.error)
      }

      const newNodes = data.nodes || []
      const newEdges = data.edges || []

      let addedNodesCount = 0
      let addedEdgesCount = 0

      for (const node of newNodes) {
        const existsInDataSet = nodesDataSet.value.get(node.id)
        if (!existsInDataSet) {
          nodesDataSet.value.add(node)
          addedNodesCount++
        }
      }

      for (const edge of newEdges) {
        const existsInDataSet = edgesDataSet.value.get(edge.id)
        if (!existsInDataSet) {
          edgesDataSet.value.add(edge)
          addedEdgesCount++
        }
      }

      console.log(`Expanded ${nodeId} (parents): +${addedNodesCount} nodes, +${addedEdgesCount} edges`)

      if (addedNodesCount === 0 && addedEdgesCount === 0) {
        setError('–ù–µ—Ç –≤—ã—à–µ—Å—Ç–æ—è—â–∏—Ö –≤–µ—Ä—à–∏–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')
      }

    } catch (err) {
      console.error('Error expanding node parents:', err)
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—ã—à–µ—Å—Ç–æ—è—â–∏–µ –≤–µ—Ä—à–∏–Ω—ã: ${err.message}`)
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –°–∫—Ä—ã—Ç—å —É–∑–µ–ª —Å –ø–æ—Ç–æ–º–∫–∞–º–∏ (—Ä–µ–∫—É—Ä—Å–∏—è)
   */
  const hideNodeWithChildren = async (nodeId) => {
    try {
      isLoading.value = true

      const params = new URLSearchParams({
        node_id: nodeId,
        direction: 'outbound',
        max_depth: 100
      })

      if (project.value) {
        params.append('project', project.value)
      }

      const url = `${API_BASE}/subgraph?${params.toString()}`
      const response = await fetch(url)

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()

      if (data.error) {
        throw new Error(data.error)
      }

      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
      const nodeIds = [nodeId]
      const edgeIds = []
      const processedNodes = new Set([nodeId])

      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤
      const findChildrenRecursively = (currentNodeId) => {
        if (edgesDataSet.value) {
          for (const edge of edgesDataSet.value.get()) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª –Ω–∞—á–∞–ª–æ–º —Ä–µ–±—Ä–∞ (–∏—Å—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏)
            const edgeStartId = edge.from || edge.start_id
            if (edgeStartId == currentNodeId) {
              const childNodeId = edge.to || edge.end_id
              if (childNodeId && !processedNodes.has(childNodeId)) {
                nodeIds.push(childNodeId)
                processedNodes.add(childNodeId)
                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –¥–µ—Ç–µ–π —ç—Ç–æ–≥–æ —É–∑–ª–∞
                findChildrenRecursively(childNodeId)
              }
              if (edge.id || edge._id) {
                edgeIds.push(edge.id || edge._id)
              }
            }
          }
        }
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
      findChildrenRecursively(nodeId)

      // –£–¥–∞–ª–∏—Ç—å –∏–∑ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞
      const numericNodeIds = nodeIds.map(id => parseInt(id))
      const numericEdgeIds = edgeIds.map(id => parseInt(id))

      nodesDataSet.value.remove(numericNodeIds)
      edgesDataSet.value.remove(numericEdgeIds)

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
      if (network.value) {
        network.value.redraw()
      }

      console.log(`Hidden ${nodeId} with children: ${nodeIds.length} nodes, ${edgeIds.length} edges`)

    } catch (err) {
      console.error('Error hiding node with children:', err)
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å —É–∑–µ–ª —Å –Ω–∏–∂–µ—Å—Ç–æ—è—â–∏–º–∏: ${err.message}`)
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –°–∫—Ä—ã—Ç—å —É–∑–µ–ª —Å –ø—Ä–µ–¥–∫–∞–º–∏ (—Ä–µ–∫—É—Ä—Å–∏—è)
   */
  const hideNodeWithParents = async (nodeId) => {
    try {
      isLoading.value = true

      const params = new URLSearchParams({
        node_id: nodeId,
        direction: 'inbound',
        max_depth: 100
      })

      if (project.value) {
        params.append('project', project.value)
      }

      const url = `${API_BASE}/subgraph?${params.toString()}`
      const response = await fetch(url)

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()

      if (data.error) {
        throw new Error(data.error)
      }

      const nodeIds = [nodeId]
      const edgeIds = []
      const processedNodes = new Set([nodeId])

      const findParentsRecursively = (currentNodeId) => {
        if (edgesDataSet.value) {
          for (const edge of edgesDataSet.value.get()) {
            const edgeEndId = edge.to || edge.end_id
            if (edgeEndId == currentNodeId) {
              const parentNodeId = edge.from || edge.start_id
              if (parentNodeId && !processedNodes.has(parentNodeId)) {
                nodeIds.push(parentNodeId)
                processedNodes.add(parentNodeId)
                findParentsRecursively(parentNodeId)
              }
              if (edge.id || edge._id) {
                edgeIds.push(edge.id || edge._id)
              }
            }
          }
        }
      }

      findParentsRecursively(nodeId)

      // –£–¥–∞–ª–∏—Ç—å –∏–∑ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞
      const numericNodeIds = nodeIds.map(id => parseInt(id))
      const numericEdgeIds = edgeIds.map(id => parseInt(id))

      nodesDataSet.value.remove(numericNodeIds)
      edgesDataSet.value.remove(numericEdgeIds)

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
      if (network.value) {
        network.value.redraw()
      }

      console.log(`Hidden ${nodeId} with parents: ${nodeIds.length} nodes, ${edgeIds.length} edges`)

    } catch (err) {
      console.error('Error hiding node with parents:', err)
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å —É–∑–µ–ª —Å –≤—ã—à–µ—Å—Ç–æ—è—â–∏–º–∏: ${err.message}`)
    } finally {
      isLoading.value = false
    }
  }

  // ========== HISTORY MANAGEMENT ==========

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
   */
  const saveCurrentState = () => {
    const now = Date.now()

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    if (isRestoringFromHistory.value) {
      console.log('–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏')
        return
      }
      
    const currentState = {
      startNode: startNode.value,
      depth: depth.value,
      project: project.value,
      nodeCount: nodeCount.value,
      edgeCount: edgeCount.value,
      nodes: getCurrentNodesData(), // –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∑–ª–æ–≤
      edges: getCurrentEdgesData(), // –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä—ë–±–µ—Ä
      timestamp: now
    }

    // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (currentHistoryIndex.value < viewHistory.value.length - 1) {
      viewHistory.value = viewHistory.value.slice(0, currentHistoryIndex.value + 1)
    }

    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    viewHistory.value.push(currentState)
    currentHistoryIndex.value = viewHistory.value.length - 1

    // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (viewHistory.value.length > maxHistorySize) {
      viewHistory.value.shift()
      currentHistoryIndex.value--
    }

    const displayName = currentState.startNode || '–≤—Å—ë'
    console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${displayName} (${currentState.nodeCount} —É–∑–ª–æ–≤, ${currentState.edgeCount} —Ä—ë–±–µ—Ä)`)
    console.log(`–ò—Å—Ç–æ—Ä–∏—è: ${viewHistory.value.length} —Å–æ—Å—Ç–æ—è–Ω–∏–π, —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: ${currentHistoryIndex.value}`)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —É–∑–ª–æ–≤
   */
  const getCurrentNodesData = () => {
    if (!nodesDataSet.value) return []
    return nodesDataSet.value.get()
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä—ë–±–µ—Ä
   */
  const getCurrentEdgesData = () => {
    if (!edgesDataSet.value) return []
    return edgesDataSet.value.get()
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
   */
  const restoreState = (state) => {
    console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${state.startNode || '–≤—Å—ë'} (${state.nodeCount} —É–∑–ª–æ–≤)`)
    isRestoringFromHistory.value = true
    
    startNode.value = state.startNode
    depth.value = state.depth
    project.value = state.project

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
    restoreVisualizationState(state)

    // –í—ã–∫–ª—é—á–∏—Ç—å —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
      isRestoringFromHistory.value = false
      console.log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Ñ–ª–∞–≥ —Å–±—Ä–æ—à–µ–Ω')
    }, 500)
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
   */
  const restoreVisualizationState = (state) => {
    console.log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é')

    // –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    if (nodesDataSet.value) {
      nodesDataSet.value.clear()
    }
    if (edgesDataSet.value) {
      edgesDataSet.value.clear()
    }

    // –î–æ–±–∞–≤–∏—Ç—å —É–∑–ª—ã –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    if (state.nodes && state.nodes.length > 0) {
      nodesDataSet.value.add(state.nodes)
    }

    // –î–æ–±–∞–≤–∏—Ç—å —Ä—ë–±—Ä–∞ –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    if (state.edges && state.edges.length > 0) {
      edgesDataSet.value.add(state.edges)
    }

    console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${state.nodes?.length || 0} —É–∑–ª–æ–≤, ${state.edges?.length || 0} —Ä—ë–±–µ—Ä`)
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –≥—Ä–∞—Ñ
   */
  const showAllGraph = () => {
    startNode.value = ''
    loadGraph()
  }

  /**
   * –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  const undoView = () => {
    if (canUndo.value) {
      console.log(`–û—Ç–º–µ–Ω–∞: —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å ${currentHistoryIndex.value}, –∏—Å—Ç–æ—Ä–∏—è ${viewHistory.value.length} —Å–æ—Å—Ç–æ—è–Ω–∏–π`)
      currentHistoryIndex.value--
      const state = viewHistory.value[currentHistoryIndex.value]
      restoreState(state)
      const displayName = state.startNode || '–≤—Å—ë'
      console.log(`–û—Ç–º–µ–Ω–µ–Ω–æ: ${displayName} (${state.nodeCount} —É–∑–ª–æ–≤)`)
    }
  }

  /**
   * –í–µ—Ä–Ω—É—Ç—å –æ—Ç–º–µ–Ω—ë–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  const redoView = () => {
    if (canRedo.value) {
      currentHistoryIndex.value++
      const state = viewHistory.value[currentHistoryIndex.value]
      restoreState(state)
      const displayName = state.startNode || '–≤—Å—ë'
      console.log(`–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: ${displayName} (${state.nodeCount} —É–∑–ª–æ–≤)`)
    }
  }

  // ========== WEBSOCKET FUNCTIONALITY ==========
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  const initWebSocket = () => {
    try {
      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ Vite proxy
      socket = io({
        transports: ['websocket', 'polling'],
        reconnection: true,
        reconnectionDelay: 1000,
        reconnectionAttempts: 5
      })
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      socket.on('connect', () => {
        console.log('‚úì WebSocket connected')
        isSocketConnected.value = true
      })
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      socket.on('disconnect', () => {
        console.log('‚úó WebSocket disconnected')
        isSocketConnected.value = false
      })
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      socket.on('connection_established', (data) => {
        console.log('‚úì Connection established:', data)
      })
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (MCP –∫–æ–º–∞–Ω–¥–∞)
      socket.on('request_selection', () => {
        console.log('‚Üí Server requested selection, sending...')
        sendSelectionToServer()
      })
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      socket.on('error', (error) => {
        console.error('WebSocket error:', error)
      })
      
      console.log('WebSocket initialization started')
    } catch (err) {
      console.error('Failed to initialize WebSocket:', err)
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É')
    }
  }
  
  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  const closeWebSocket = () => {
    if (socket) {
      socket.disconnect()
      socket = null
      isSocketConnected.value = false
      console.log('WebSocket connection closed')
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –≤—ã–±–æ—Ä–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ WebSocket
   */
  const sendSelectionToServer = () => {
    if (!socket || !isSocketConnected.value) {
      console.warn('WebSocket not connected, cannot send selection')
      return
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É–∑–ª—ã –∏ —Ä—ë–±—Ä–∞ –∏–∑ vis-network
    const selectedNodes = network.value ? network.value.getSelectedNodes() : []
    const selectedEdges = network.value ? network.value.getSelectedEdges() : []

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É–∑–ª–æ–≤
    const nodesPayload = selectedNodes.map((nid) => {
      let meta = {}
      try { meta = nodesDataSet.value ? (nodesDataSet.value.get(nid) || {}) : {} } catch {}
      return {
        id: meta.id || nid,
        key: meta._key || meta.key || null,
        label: meta.label || meta.name || null,
      }
    })

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä—ë–±–µ—Ä
    const edgesPayload = selectedEdges.map((eid) => {
      let meta = {}
      try { meta = edgesDataSet.value ? (edgesDataSet.value.get(eid) || {}) : {} } catch {}
      return {
        id: meta.id || eid,
        from: meta.from || null,
        to: meta.to || null,
        label: meta.label || null,
      }
    })

    const selectionData = {
      nodes: nodesPayload,
      edges: edgesPayload,
      timestamp: Date.now()
    }

    console.log(`Sending selection: ${nodesPayload.length} nodes, ${edgesPayload.length} edges`)
    socket.emit('selection_response', selectionData)
  }
  
  // ========== RETURN ==========
  
  const api = {
    // State
    nodes,
    startNode,
    depth,
    project,
    theme,
    network,
    nodesDataSet,
    edgesDataSet,
    isLoading,
    error,
    selectedObject,
    showDetails,
    selectedNodesList,
    selectedEdgesList,
    viewHistory,
    currentHistoryIndex,
    
    // Computed
    nodeCount,
    edgeCount,
    selectionCount,
    selectedNodesCount,
    selectedEdgesCount,
    canUndo,
    canRedo,
    
    // Actions
    setNetwork,
    loadNodes,
    loadGraph,
    applyTheme,
    updateSelectedNodes,
    updateSelectedEdges,
    clearSelection,
    fitGraph,
    changeProject,
    loadDocumentDetails,
    closeFullText,
    toggleFullText,
    loadObjectDetails,
    selectNode,
    selectEdge,
    closeDetails,

    // Expand/Hide actions
    expandNodeChildren,
    expandNodeParents,
    hideNodeWithChildren,
    hideNodeWithParents,
    
    // History management
    showAllGraph,
    undoView,
    redoView,
    
    // WebSocket actions
    initWebSocket,
    closeWebSocket,
    sendSelectionToServer,
  }

  return api
})
