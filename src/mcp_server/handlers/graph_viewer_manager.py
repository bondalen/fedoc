"""
MCP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç Graph Viewer –≤ MCP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ Cursor AI

–í–µ—Ä—Å–∏—è 2.0 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ConfigManager –∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –º–∞—à–∏–Ω
"""

import sys
import webbrowser
from pathlib import Path
from typing import Optional, Dict
import importlib

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
import lib.graph_viewer.backend.config_manager
import lib.graph_viewer.backend.interactive_setup
import lib.graph_viewer.backend.tunnel_manager
import lib.graph_viewer.backend.process_manager

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
importlib.reload(lib.graph_viewer.backend.config_manager)
importlib.reload(lib.graph_viewer.backend.interactive_setup)
importlib.reload(lib.graph_viewer.backend.tunnel_manager)
importlib.reload(lib.graph_viewer.backend.process_manager)

from lib.graph_viewer.backend import (
    ConfigManager, get_config,
    InteractiveSetup,
    TunnelManager, ProcessManager
)


# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ print –≤ stderr –¥–ª—è MCP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
def log(message):
    """–í—ã–≤–æ–¥ –≤ stderr —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å MCP –ø—Ä–æ—Ç–æ–∫–æ–ª"""
    print(message, file=sys.stderr, flush=True)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (singleton)
_config = None

def get_or_create_config() -> ConfigManager:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å ConfigManager"""
    global _config
    if _config is None:
        _config = get_config()
    return _config


def open_graph_viewer(
    project: Optional[str] = None,
    auto_open_browser: bool = True
) -> Dict[str, any]:
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    
    –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
    1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Å –ø—Ä–æ—Ñ–∏–ª–µ–º –º–∞—à–∏–Ω—ã)
    2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)
    3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç/—Å–æ–∑–¥–∞–µ—Ç SSH —Ç—É–Ω–Ω–µ–ª—å –∫ ArangoDB
    4. –ó–∞–ø—É—Å–∫–∞–µ—Ç API —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω)
    5. –ó–∞–ø—É—Å–∫–∞–µ—Ç Vite dev —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω)  
    6. –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    
    Args:
        project: –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç—É (fepro, femsq, fedoc) –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö
        auto_open_browser: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–ø—É—Å–∫–∞ –∏ URL –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Cursor AI:
        "–û—Ç–∫—Ä–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–æ–º"
        "–ó–∞–ø—É—Å—Ç–∏ graph viewer –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ FEPRO"
        "–ü–æ–∫–∞–∂–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        log("\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        config = get_or_create_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        if config.is_first_run():
            log("\nüîß –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
            setup = InteractiveSetup(config)
            setup.check_all()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        tunnel_mgr = TunnelManager(config=config)
        process_mgr = ProcessManager(config=config)
        
        results = {
            "status": "success",
            "message": "–°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞ –∑–∞–ø—É—â–µ–Ω–∞",
            "url": f"http://localhost:{config.get('ports.vite_server', 5173)}",
            "components": {}
        }
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –≤—Å–µ SSH —Ç—É–Ω–Ω–µ–ª–∏
        log("\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH —Ç—É–Ω–Ω–µ–ª–µ–π...")
        tunnel_ok = tunnel_mgr.ensure_all_tunnels()
        if not tunnel_ok:
            return {
                "status": "error",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSH —Ç—É–Ω–Ω–µ–ª–∏",
                "details": f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSH –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É {config.get('remote_server.ssh_alias')}"
            }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ç—É–Ω–Ω–µ–ª–µ–π
        tunnels_status = tunnel_mgr.get_status()
        results["components"]["ssh_tunnels"] = tunnels_status
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ —Ç—É–Ω–Ω–µ–ª—è
        for name, tunnel in tunnels_status.items():
            if tunnel['status'] == 'connected':
                log(f"   ‚úì {tunnel['name']} —Ç—É–Ω–Ω–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω (–ø–æ—Ä—Ç {tunnel['local_port']}, PID: {tunnel.get('pid', 'N/A')})")
            else:
                log(f"   ‚ö†Ô∏è {tunnel['name']} —Ç—É–Ω–Ω–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
        
        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
        log("\nüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...")
        api_ok = process_mgr.start_api_server()
        if not api_ok:
            return {
                "status": "error",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä",
                "details": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ API —Å–µ—Ä–≤–µ—Ä–∞"
            }
        log(f"   ‚úì API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        
        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º Vite dev —Å–µ—Ä–≤–µ—Ä
        log("\n‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ Vite —Å–µ—Ä–≤–µ—Ä–∞...")
        vite_ok = process_mgr.start_vite_server()
        if not vite_ok:
            return {
                "status": "error",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Vite —Å–µ—Ä–≤–µ—Ä",
                "details": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Vite —Å–µ—Ä–≤–µ—Ä–∞"
            }
        log(f"   ‚úì Vite —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        proc_status = process_mgr.get_status()
        results["components"]["api_server"] = f"running on port {proc_status['api_server']['port']}"
        results["components"]["vite_server"] = f"running on port {proc_status['vite_server']['port']}"
        
        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        url = results["url"]
        if project:
            url += f"?project={project}"
            results["url"] = url
            results["message"] = f"–°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project}"
        
        # 5. –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å —É—á–µ—Ç–æ–º WSL –∏ —Ä–∞–∑–Ω—ã—Ö –û–°
        browser_setting = config.get('options.auto_open_browser', True)
        if auto_open_browser and browser_setting:
            log(f"\nüåê –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä: {url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, WSL)
            browser_cmd = config.get('environment.browser_command')
            if browser_cmd:
                # WSL –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
                import subprocess
                try:
                    subprocess.run(f'{browser_cmd} {url}', shell=True, check=False)
                except Exception as e:
                    log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: {e}")
                    log(f"   –û—Ç–∫—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é: {url}")
            else:
                # –û–±—ã—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º webbrowser
                webbrowser.open(url)
            
            results["browser_opened"] = True
        else:
            results["browser_opened"] = False
            log(f"\nüåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {url}")
        
        log(f"\n‚úÖ {results['message']}")
        log(f"üìä URL: {results['url']}")
        log(f"üñ•Ô∏è  –ú–∞—à–∏–Ω–∞: {config.machine_name}")
        
        return results
        
    except Exception as e:
        log(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc(file=sys.stderr)
        
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Graph Viewer: {str(e)}",
            "details": str(e)
        }


def graph_viewer_status() -> Dict[str, any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Cursor AI:
        "–ü—Ä–æ–≤–µ—Ä—å —Å—Ç–∞—Ç—É—Å graph viewer"
        "–†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è?"
        "–ö–∞–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã graph viewer –∑–∞–ø—É—â–µ–Ω—ã?"
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_or_create_config()
        
        tunnel_mgr = TunnelManager(config=config)
        process_mgr = ProcessManager(config=config)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
        tunnels_status = tunnel_mgr.get_status()
        process_status = process_mgr.get_status()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É–Ω–Ω–µ–ª–µ–π
        all_tunnels_ok = all(t.get('status') == 'connected' for t in tunnels_status.values()) if tunnels_status else True
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "overall_status": "running" if (
                all_tunnels_ok and
                process_status["overall_status"] == "running"
            ) else "stopped" if (
                not all_tunnels_ok and
                process_status["overall_status"] == "stopped"
            ) else "partial",
            "machine": config.machine_name,
            "components": {
                "ssh_tunnels": tunnels_status,
                "api_server": {
                    "status": process_status["api_server"]["status"],
                    "port": process_status["api_server"]["port"],
                    "pid": process_status["api_server"]["pid"]
                },
                "vite_server": {
                    "status": process_status["vite_server"]["status"],
                    "port": process_status["vite_server"]["port"],
                    "pid": process_status["vite_server"]["pid"]
                }
            },
            "url": f"http://localhost:{config.get('ports.vite_server', 5173)}",
            "ready": (
                all_tunnels_ok and
                process_status["overall_status"] == "running"
            )
        }
        
        # –í—ã–≤–æ–¥–∏–º –≤ —É–¥–æ–±–Ω–æ–º –≤–∏–¥–µ
        status_icon = "‚úÖ" if result["overall_status"] == "running" else "‚ö†Ô∏è" if result["overall_status"] == "partial" else "‚ùå"
        log(f"\n{status_icon} –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {result['overall_status']}")
        log(f"üñ•Ô∏è  –ú–∞—à–∏–Ω–∞: {result['machine']}")
        log("\nüîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        
        # –í—ã–≤–æ–¥–∏–º —Ç—É–Ω–Ω–µ–ª–∏
        for name, tunnel in tunnels_status.items():
            tunnel_icon = "‚úÖ" if tunnel.get("status") == "connected" else "‚ùå"
            pid_info = f" (PID: {tunnel.get('pid')})" if tunnel.get("pid") else ""
            log(f"   {tunnel_icon} {name}_tunnel: {tunnel.get('status', 'unknown')}{pid_info}")
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        for name in ["api_server", "vite_server"]:
            comp = result["components"][name]
            comp_icon = "‚úÖ" if comp["status"] == "running" else "‚ùå"
            pid_info = f" (PID: {comp['pid']})" if comp.get("pid") else ""
            log(f"   {comp_icon} {name}: {comp['status']}{pid_info}")
        
        if result["ready"]:
            log(f"\nüåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {result['url']}")
        
        return result
        
    except Exception as e:
        log(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        }


def stop_graph_viewer(
    stop_tunnel: bool = False,
    force: bool = False
) -> Dict[str, any]:
    """
    –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞
    
    Args:
        stop_tunnel: –¢–∞–∫–∂–µ –∑–∞–∫—Ä—ã—Ç—å SSH —Ç—É–Ω–Ω–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–º)
        force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (kill -9)
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Cursor AI:
        "–û—Å—Ç–∞–Ω–æ–≤–∏ graph viewer"
        "–í—ã–∫–ª—é—á–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"
        "–ó–∞–∫—Ä–æ–π graph viewer –∏ —Ç—É–Ω–Ω–µ–ª—å"
    """
    try:
        config = get_or_create_config()
        
        tunnel_mgr = TunnelManager(config=config)
        process_mgr = ProcessManager(config=config)
        
        results = {
            "status": "success",
            "message": "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã",
            "stopped": []
        }
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        log("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        
        if process_mgr.check_vite_server():
            process_mgr.stop_vite_server(force)
            results["stopped"].append("vite_server")
            log("   ‚úì Vite —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if process_mgr.check_api_server():
            process_mgr.stop_api_server(force)
            results["stopped"].append("api_server")
            log("   ‚úì API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
        if stop_tunnel and tunnel_mgr.check_tunnel():
            tunnel_mgr.close_tunnel()
            results["stopped"].append("ssh_tunnel")
            log("   ‚úì SSH —Ç—É–Ω–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç")
        
        if not results["stopped"]:
            results["message"] = "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            log("   ‚ÑπÔ∏è  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–∂–µ –±—ã–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            results["message"] = f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {', '.join(results['stopped'])}"
        
        log(f"\n‚úÖ {results['message']}")
        return results
        
    except Exception as e:
        log(f"\n‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}"
        }


def get_selected_nodes() -> Dict[str, any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ Graph Viewer
    
    –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –±—Ä–∞—É–∑–µ—Ä–∞ —Ç–µ–∫—É—â—É—é –≤—ã–±–æ—Ä–∫—É —É–∑–ª–æ–≤ –∏ —Ä—ë–±–µ—Ä
    —á–µ—Ä–µ–∑ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —É–∑–ª–∞–º–∏ –∏ —Ä—ë–±—Ä–∞–º–∏
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Cursor AI:
        "–ü–æ–∫–∞–∂–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ Graph Viewer"
        "–ß—Ç–æ –≤—ã–±—Ä–∞–Ω–æ –≤ –≥—Ä–∞—Ñ–µ?"
        "–ü–æ–∫–∞–∂–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É–∑–ª—ã"
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_or_create_config()
        api_port = config.get('ports.api_server', 8899)
        
        log("\nüìã –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –≤—ã–±–æ—Ä–∫—É –∏–∑ Graph Viewer...")
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å–µ—Ä–≤–µ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —É –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ WebSocket
        import requests
        
        url = f'http://localhost:{api_port}/api/request_selection'
        response = requests.get(url, params={'timeout': '3.0'}, timeout=5)
        
        if response.status_code == 408:  # Timeout
            return {
                "status": "timeout",
                "message": "‚è±Ô∏è Graph Viewer –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –í–æ–∑–º–æ–∂–Ω–æ:\n" +
                          "  ‚Ä¢ Graph Viewer –Ω–µ –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n" +
                          "  ‚Ä¢ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n" +
                          "  ‚Ä¢ –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω\n\n" +
                          "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n" +
                          "  1. –û—Ç–∫—Ä—ã—Ç—å Graph Viewer: '–û—Ç–∫—Ä–æ–π graph viewer'\n" +
                          "  2. –í—ã–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –≤ –≥—Ä–∞—Ñ–µ (Ctrl+Click)\n" +
                          "  3. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"
            }
        
        if response.status_code != 200:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∫–∏: HTTP {response.status_code}"
            }
        
        data = response.json()
        
        if data.get('status') != 'success':
            return {
                "status": "error",
                "message": data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            }
        
        selection = data.get('selection', {})
        nodes = selection.get('nodes', [])
        edges = selection.get('edges', [])
        
        if not nodes and not edges:
            return {
                "status": "empty",
                "message": "üì≠ –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤\n\n" +
                          "–í—ã–±–µ—Ä–∏—Ç–µ —É–∑–ª—ã –∏–ª–∏ —Ä—ë–±—Ä–∞ –≤ Graph Viewer:\n" +
                          "  ‚Ä¢ –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —É–∑–µ–ª –¥–ª—è –≤—ã–±–æ—Ä–∞\n" +
                          "  ‚Ä¢ Ctrl+Click –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n" +
                          "  ‚Ä¢ –ö–ª–∏–∫ –Ω–∞ –ø—É—Å—Ç–æ–º –º–µ—Å—Ç–µ –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞"
            }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
        result_lines = ["‚úÖ –í—ã–±—Ä–∞–Ω–æ –≤ Graph Viewer:\n"]
        
        if nodes:
            result_lines.append(f"üì¶ –£–∑–ª—ã ({len(nodes)}):")
            for i, node in enumerate(nodes, 1):
                node_id = node.get('id', node.get('_id', 'N/A'))
                node_name = node.get('label', node.get('name', node.get('key', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')))
                node_key = node.get('key', node.get('_key', ''))
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–∑–ª–∞ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É –∫–ª—é—á–∞
                node_kind = node.get('kind', node.get('type', 'unknown'))
                if node_kind == 'unknown' and node_key:
                    if node_key.startswith('c:'):
                        node_kind = '–∫–∞—Ç–µ–≥–æ—Ä–∏—è'
                    elif node_key.startswith('t:'):
                        node_kind = '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è'
                    elif node_key.startswith('v:'):
                        node_kind = '–≤–µ—Ä—Å–∏—è'
                result_lines.append(f"{i}. ID: {node_id}")
                if node_key:
                    result_lines.append(f"   –ö–ª—é—á: {node_key}")
                result_lines.append(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {node_name}")
                result_lines.append(f"   –¢–∏–ø: {node_kind}")
                
                if node.get('description'):
                    desc = node['description'][:100]
                    if len(node['description']) > 100:
                        desc += '...'
                    result_lines.append(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {desc}")
                
                result_lines.append("")
        
        if edges:
            result_lines.append(f"üîó –†—ë–±—Ä–∞ ({len(edges)}):")
            for i, edge in enumerate(edges, 1):
                edge_id = edge.get('id', edge.get('_id', 'N/A'))
                edge_from = edge.get('from', edge.get('_from', '?'))
                edge_to = edge.get('to', edge.get('_to', '?'))
                projects = edge.get('projects', [])
                
                result_lines.append(f"{i}. {edge_id}")
                result_lines.append(f"   –û—Ç: {edge_from}")
                result_lines.append(f"   –ö: {edge_to}")
                
                if projects:
                    result_lines.append(f"   –ü—Ä–æ–µ–∫—Ç—ã: {', '.join(projects)}")
                
                if edge.get('relationType'):
                    result_lines.append(f"   –¢–∏–ø —Å–≤—è–∑–∏: {edge['relationType']}")
                
                result_lines.append("")
        
        log(f"‚úì –ü–æ–ª—É—á–µ–Ω–æ: {len(nodes)} —É–∑–ª–æ–≤, {len(edges)} —Ä—ë–±–µ—Ä")
        
        return {
            "status": "success",
            "message": "\n".join(result_lines),
            "data": {
                "nodes": nodes,
                "edges": edges,
                "count": {
                    "nodes": len(nodes),
                    "edges": len(edges),
                    "total": len(nodes) + len(edges)
                }
            }
        }
        
    except requests.exceptions.ConnectionError:
        return {
            "status": "error",
            "message": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API —Å–µ—Ä–≤–µ—Ä—É\n\n" +
                      "API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n" +
                      "  1. –ó–∞–ø—É—Å—Ç–∏—Ç—å Graph Viewer: '–û—Ç–∫—Ä–æ–π graph viewer'\n" +
                      "  2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: '–ü—Ä–æ–≤–µ—Ä—å —Å—Ç–∞—Ç—É—Å graph viewer'"
        }
    except Exception as e:
        log(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∫–∏: {e}")
        import traceback
        traceback.print_exc(file=sys.stderr)
        
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∫–∏: {str(e)}"
        }


# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ MCP —Å–µ—Ä–≤–µ—Ä–µ
__all__ = [
    'open_graph_viewer',
    'graph_viewer_status',
    'stop_graph_viewer',
    'get_selected_nodes'
]
