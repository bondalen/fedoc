"""
MCP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç Graph Viewer –≤ MCP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ Cursor AI
"""

import sys
import webbrowser
from pathlib import Path
from typing import Optional, Dict
import io
import contextlib

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from lib.graph_viewer.backend import TunnelManager, ProcessManager


# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ print –≤ stderr –¥–ª—è MCP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
def log(message):
    """–í—ã–≤–æ–¥ –≤ stderr —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å MCP –ø—Ä–æ—Ç–æ–∫–æ–ª"""
    print(message, file=sys.stderr, flush=True)


@contextlib.contextmanager
def suppress_stdout():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è stdout (–¥–ª—è subprocess –≤—ã–∑–æ–≤–æ–≤)"""
    old_stdout = sys.stdout
    sys.stdout = io.StringIO()
    try:
        yield
    finally:
        sys.stdout = old_stdout


def open_graph_viewer(
    project: Optional[str] = None,
    auto_open_browser: bool = True
) -> Dict[str, any]:
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    
    –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç/—Å–æ–∑–¥–∞–µ—Ç SSH —Ç—É–Ω–Ω–µ–ª—å –∫ ArangoDB
    2. –ó–∞–ø—É—Å–∫–∞–µ—Ç API —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω)
    3. –ó–∞–ø—É—Å–∫–∞–µ—Ç Vite dev —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω)  
    4. –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    
    Args:
        project: –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç—É (fepro, femsq, fedoc) –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö
        auto_open_browser: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–ø—É—Å–∫–∞ –∏ URL –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Cursor AI:
        "–û—Ç–∫—Ä–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–æ–º"
        "–ó–∞–ø—É—Å—Ç–∏ graph viewer –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ FEPRO"
        "–ü–æ–∫–∞–∂–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        tunnel_mgr = TunnelManager()
        process_mgr = ProcessManager()
        
        results = {
            "status": "success",
            "message": "–°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞ –∑–∞–ø—É—â–µ–Ω–∞",
            "url": "http://localhost:5173",
            "components": {}
        }
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º SSH —Ç—É–Ω–Ω–µ–ª—å
        log("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH —Ç—É–Ω–Ω–µ–ª—è...")
        tunnel_ok = tunnel_mgr.ensure_tunnel()
        if not tunnel_ok:
            return {
                "status": "error",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSH —Ç—É–Ω–Ω–µ–ª—å –∫ ArangoDB",
                "details": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSH –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É vuege-server"
            }
        
        tunnel_status = tunnel_mgr.get_status()
        results["components"]["ssh_tunnel"] = f"active on port {tunnel_status['local_port']}"
        
        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
        log("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...")
        api_ok = process_mgr.start_api_server()
        if not api_ok:
            return {
                "status": "error",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä",
                "details": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥: /tmp/graph_viewer_api.log"
            }
        
        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º Vite dev —Å–µ—Ä–≤–µ—Ä
        log("‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ Vite —Å–µ—Ä–≤–µ—Ä–∞...")
        vite_ok = process_mgr.start_vite_server()
        if not vite_ok:
            return {
                "status": "error",
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Vite —Å–µ—Ä–≤–µ—Ä",
                "details": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥: /tmp/graph_viewer_vite.log"
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        proc_status = process_mgr.get_status()
        results["components"]["api_server"] = f"running on port {proc_status['api_server']['port']}"
        results["components"]["vite_server"] = f"running on port {proc_status['vite_server']['port']}"
        
        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        url = "http://localhost:5173"
        if project:
            url += f"?project={project}"
            results["url"] = url
            results["message"] = f"–°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project}"
        
        # 5. –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        if auto_open_browser:
            log(f"üåê –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä: {url}")
            webbrowser.open(url)
            results["browser_opened"] = True
        else:
            results["browser_opened"] = False
        
        log(f"\n‚úÖ {results['message']}")
        log(f"üìä URL: {results['url']}")
        log(f"üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        for name, status in results["components"].items():
            log(f"   - {name}: {status}")
        
        return results
        
    except Exception as e:
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Graph Viewer: {str(e)}",
            "details": str(e)
        }


def graph_viewer_status() -> Dict[str, any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Cursor AI:
        "–ü—Ä–æ–≤–µ—Ä—å —Å—Ç–∞—Ç—É—Å graph viewer"
        "–†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è?"
        "–ö–∞–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã graph viewer –∑–∞–ø—É—â–µ–Ω—ã?"
    """
    try:
        tunnel_mgr = TunnelManager()
        process_mgr = ProcessManager()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
        tunnel_status = tunnel_mgr.get_status()
        process_status = process_mgr.get_status()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "overall_status": "running" if (
                tunnel_status["status"] == "connected" and
                process_status["overall_status"] == "running"
            ) else "stopped" if (
                tunnel_status["status"] == "disconnected" and
                process_status["overall_status"] == "stopped"
            ) else "partial",
            "components": {
                "ssh_tunnel": {
                    "status": tunnel_status["status"],
                    "port": tunnel_status["local_port"],
                    "remote": tunnel_status["remote_host"],
                    "pid": tunnel_status.get("pid")
                },
                "api_server": {
                    "status": process_status["api_server"]["status"],
                    "port": process_status["api_server"]["port"],
                    "pid": process_status["api_server"]["pid"]
                },
                "vite_server": {
                    "status": process_status["vite_server"]["status"],
                    "port": process_status["vite_server"]["port"],
                    "pid": process_status["vite_server"]["pid"]
                }
            },
            "url": "http://localhost:5173",
            "ready": (
                tunnel_status["status"] == "connected" and
                process_status["overall_status"] == "running"
            )
        }
        
        # –í—ã–≤–æ–¥–∏–º –≤ —É–¥–æ–±–Ω–æ–º –≤–∏–¥–µ
        status_icon = "‚úÖ" if result["overall_status"] == "running" else "‚ö†Ô∏è" if result["overall_status"] == "partial" else "‚ùå"
        log(f"{status_icon} –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {result['overall_status']}")
        log("\nüîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        for name, comp in result["components"].items():
            comp_icon = "‚úÖ" if comp["status"] in ["connected", "running"] else "‚ùå"
            pid_info = f" (PID: {comp['pid']})" if comp.get("pid") else ""
            log(f"   {comp_icon} {name}: {comp['status']}{pid_info}")
        
        if result["ready"]:
            log(f"\nüåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {result['url']}")
        
        return result
        
    except Exception as e:
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        }


def stop_graph_viewer(
    stop_tunnel: bool = False,
    force: bool = False
) -> Dict[str, any]:
    """
    –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞
    
    Args:
        stop_tunnel: –¢–∞–∫–∂–µ –∑–∞–∫—Ä—ã—Ç—å SSH —Ç—É–Ω–Ω–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–º)
        force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (kill -9)
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Cursor AI:
        "–û—Å—Ç–∞–Ω–æ–≤–∏ graph viewer"
        "–í—ã–∫–ª—é—á–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"
        "–ó–∞–∫—Ä–æ–π graph viewer –∏ —Ç—É–Ω–Ω–µ–ª—å"
    """
    try:
        tunnel_mgr = TunnelManager()
        process_mgr = ProcessManager()
        
        results = {
            "status": "success",
            "message": "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã",
            "stopped": []
        }
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        log("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        
        if process_mgr.check_vite_server():
            process_mgr.stop_vite_server(force)
            results["stopped"].append("vite_server")
        
        if process_mgr.check_api_server():
            process_mgr.stop_api_server(force)
            results["stopped"].append("api_server")
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
        if stop_tunnel and tunnel_mgr.check_tunnel():
            tunnel_mgr.close_tunnel()
            results["stopped"].append("ssh_tunnel")
        
        if not results["stopped"]:
            results["message"] = "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        else:
            results["message"] = f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {', '.join(results['stopped'])}"
        
        log(f"‚úÖ {results['message']}")
        return results
        
    except Exception as e:
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}"
        }


# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ MCP —Å–µ—Ä–≤–µ—Ä–µ
__all__ = [
    'open_graph_viewer',
    'graph_viewer_status',
    'stop_graph_viewer'
]

