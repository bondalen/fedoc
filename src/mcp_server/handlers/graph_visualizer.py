"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–æ–≤
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É graph_viewer –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ MCP
"""

import sys
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ graph_viewer
sys.path.insert(0, str(Path(__file__).parent.parent.parent))
from lib.graph_viewer import ArangoGraphViewer

# TODO: –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MCP –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
# from mcp import tool

from ..config import (
    ARANGO_HOST, 
    ARANGO_DB, 
    ARANGO_USER, 
    ARANGO_PASSWORD, 
    COMMON_GRAPH_NAME
)


def show_graph(
    project: str = None,
    start_node: str = "canonical_nodes/c:backend",
    depth: int = 5,
    theme: str = "dark"
) -> str:
    """
    –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
    
    Args:
        project: –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç—É (fepro, femsq, fedoc) –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö
        start_node: –°—Ç–∞—Ä—Ç–æ–≤–∞—è –≤–µ—Ä—à–∏–Ω–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞
        depth: –ì–ª—É–±–∏–Ω–∞ –æ–±—Ö–æ–¥–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ë–±–µ—Ä)
        theme: –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è (dark/light)
    
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    """
    try:
        viewer = ArangoGraphViewer(
            host=ARANGO_HOST,
            database=ARANGO_DB,
            username=ARANGO_USER,
            password=ARANGO_PASSWORD
        )
        
        edges = viewer.fetch_graph(
            graph_name=COMMON_GRAPH_NAME,
            project_filter=project,
            start_node=start_node,
            depth=depth
        )
        
        if not edges:
            return f"‚ö†Ô∏è –ì—Ä–∞—Ñ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project or '–≤—Å–µ'}'"
        
        output_file = viewer.visualize(
            edges=edges,
            project_filter=project,
            theme=theme
        )
        
        project_name = project or "–≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã"
        nodes_count = len(set(e['from_key'] for e in edges) | set(e['to_key'] for e in edges))
        
        return (
            f"‚úÖ –ì—Ä–∞—Ñ –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}' –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"
            f"üìÅ –§–∞–π–ª: {output_file}\n"
            f"üìä –£–∑–ª–æ–≤: {nodes_count}\n"
            f"üîó –†—ë–±–µ—Ä: {len(edges)}"
        )
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}"


def query_graph(aql_query: str) -> dict:
    """
    –í—ã–ø–æ–ª–Ω–∏—Ç—å AQL –∑–∞–ø—Ä–æ—Å –∫ –≥—Ä–∞—Ñ—É –ø—Ä–æ–µ–∫—Ç–æ–≤
    
    Args:
        aql_query: AQL –∑–∞–ø—Ä–æ—Å
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AQL –∑–∞–ø—Ä–æ—Å–æ–≤
    return {"status": "not_implemented", "message": "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"}
